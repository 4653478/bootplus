<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
        当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<configuration scan="true" scanPeriod="3600 seconds" debug="false">

    <contextName>logback</contextName>
    <!-- 日志输出文件 -->
    <property name="log.path" value="${catalina.base:-.}/logs"/>
    <property name="log.pattern"
              value="[%p][%d{yyyy-MM-dd HH:mm:ss}] [%logger{10}:%L] %m%n"/>
    <property name="log.pattern.detail"
              value="[%p][%d{yyyy-MM-dd HH:mm:ss}] %c{1} [%file:%L] %m%n"/>

    <!-- 项目名 -->
    <define name="log.project" class="com.age.frame.log.logback.property.YamlPropertyDefiner">
        <propertyKey>application.name</propertyKey>
    </define>
    <!-- 日志级别 -->
    <define name="log.level" class="com.age.frame.log.logback.property.YamlPropertyDefiner">
        <propertyKey>application.logs.level</propertyKey>
    </define>
    <!-- 日志存放路径 -->
    <define name="log.path.test" class="com.age.frame.log.logback.property.LogsPathPropertyDefiner">
        <projectName>${log.project}</projectName>
    </define>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr([%d{yyyy-MM-dd HH:mm:ss}]){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([%c{1}:%L]){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
            <!--            <pattern>${log.pattern.detail}</pattern>-->
            <!--            <pattern>${CONSOLE_LOG_PATTERN}</pattern>-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 简单日志输出 -->
    <appender name="STDOUT_SIMPLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%m%n</pattern>
            <!--            <pattern>${log.pattern.detail}</pattern>-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 详细日志输出 -->
    <appender name="STDOUT_DETAIL" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--            <pattern>%m%n</pattern>-->
            <pattern>${log.pattern.detail}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- SQL输出 -->
    <appender name="STDOUT_SQL" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%m%n</pattern>
            <!--            <pattern>${log.pattern.detail}</pattern>-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 执行慢的SQL输出 -->
    <appender name="STDOUT_SLOWSQL" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 基础日志输出 -->
    <appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/sys-info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志最大的历史 60天 -->
            <maxHistory>60</maxHistory>
            <totalSizeCap>2GB</totalSizeCap>
            <!-- 每个日志文件的大小 -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/sys-error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志最大的历史 60天 -->
            <maxHistory>60</maxHistory>
            <!-- 每个日志文件的大小 -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 系统日志输出 -->
    <appender name="SYS_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.path}/sys-log.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 按天回滚 daily -->
            <fileNamePattern>${log.path}/sys-log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 日志最大的历史 60天 -->
            <maxHistory>60</maxHistory>
            <!-- 每个日志文件的大小 -->
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern.detail}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 显示形成的sql、使用的参数、结果集 -->
    <!--
        <logger name="java.sql" level="DEBUG" />
        <logger name="org.springframework.jdbc" level="DEBUG" />
    -->

    <!-- 解决SQL日志打印2次的问题 -->
    <!--<logger name="java.sql.PreparedStatement" level="DEBUG"></logger>-->

    <!-- com.alibaba.druid.filter.logging.LogFilter -->
    <logger name="druid.sql.Statement" level="ERROR"></logger>

    <root level="INFO">
        <appender-ref ref="console"/>
        <!--        <appender-ref ref="STDOUT_DETAIL"/>-->
    </root>

    <!-- 系统操作日志 -->
    <root level="INFO">
        <!--<appender-ref ref="file_info"/>-->
        <appender-ref ref="file_error"/>
    </root>

    <!--<logger name="org.springframework" level="INFO"></logger>-->
    <!-- SpringBoot2.0以上配置：org.springframework.boot.context.logging.LoggingApplicationListener#initializeSpringBootLogging()#SPRING_BOOT_LOGGING_LOGGERS -->
    <!--    <logger name="org.springframework.boot.autoconfigure" level="WARN"/>-->

    <logger name="com.age" level="DEBUG" additivity="true"/>

    <!-- org.apache.ibatis.mapping.MappedStatement -->
    <!-- additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。 -->
    <logger name="ahb.dao" level="DEBUG,sql" additivity="false">
        <appender-ref ref="STDOUT_SQL"/>
    </logger>

    <logger name="com.alibaba.druid.filter.stat.StatFilter"
            level="ERROR,slowsql" additivity="false">
        <appender-ref ref="STDOUT_SLOWSQL"/>
    </logger>

    <!-- 系统日志 -->
    <logger name="ahb.file.Statement" level="INFO" additivity="false">
        <appender-ref ref="SYS_FILE"/>
        <appender-ref ref="STDOUT_DETAIL"/>
    </logger>

    <!-- 拦截器日志 -->
    <logger name="ahb.interceptor.Statement" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT_SIMPLE"/>
    </logger>

</configuration>